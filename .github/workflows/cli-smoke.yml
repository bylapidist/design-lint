name: CLI smoke test

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

jobs:
  smoke:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [22]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: npm
      - run: npm ci
      - run: npm run build
      - name: Pack
        run: |
          PKG=$(npm pack)
          echo "PKG=$PKG" >> $GITHUB_ENV
      - name: Scoped npx
        run: npx --yes "./$PKG" --help
      - name: Local install bin and options
        run: |
          mkdir -p tmp/test
          cd tmp/test
          npm init -y >/dev/null 2>&1
          npm install -D "../../$PKG" >/dev/null 2>&1
          npx design-lint --help
          npx design-lint --version
          npx design-lint init
          test -f designlint.config.json
          for fmt in json js cjs mjs ts mts; do
            rm -f designlint.config.*
            npx design-lint init --init-format "$fmt"
            test -f "designlint.config.$fmt"
          done
          rm -f designlint.config.*
          cat > designlint.config.json <<'EOF'
          {
            "tokens": {
              "deprecations": { "old": { "replacement": "new" } },
              "colors": { "primary": "#fff" }
            },
            "rules": {
              "design-system/deprecation": "error",
              "design-token/colors": "warn"
            }
          }
          EOF
          echo "const a = 'old'; const b = '#000';" > file.ts
          echo "const a = 'old';" > ignored.ts
          echo "ignored.ts" > .extraignore
          echo "ignored.ts" > .designlintignore
          npx design-lint file.ts --config designlint.config.json || true
          npx design-lint file.ts --config designlint.config.json --format stylish || true
          ABS=$(realpath designlint.config.json)
          npx design-lint file.ts --config "$ABS" --format json || true
          npx design-lint file.ts ignored.ts --config designlint.config.json --format json || true
          npx design-lint file.ts --config designlint.config.json --format json --output report.txt || true
          test -f report.txt
          cat report.txt
          npx design-lint file.ts --config designlint.config.json --format json --report results.json || true
          test -f results.json
          cat results.json
          npx design-lint file.ts ignored.ts --config designlint.config.json --format json --ignore-path .extraignore || true
          npx design-lint file.ts --config designlint.config.json --quiet --format json || true
          npx design-lint file.ts --config designlint.config.json --no-color --format json || true
          npx design-lint file.ts --config designlint.config.json --format sarif || true
          npx design-lint file.ts --config designlint.config.json --format json --concurrency 1 || true
          npx design-lint file.ts --config designlint.config.json --format json --max-warnings 0 || true
          npx design-lint file.ts --config designlint.config.json --format json --cache || true
          test -f .designlintcache
          npx design-lint file.ts --config designlint.config.json --fix || true
          npx design-lint file.ts --config designlint.config.json --watch >/dev/null 2>&1 & PID=$!
          sleep 2
          kill $PID || true
          wait $PID || true
          cat > formatter.mjs <<'EOF'
          export default (results) => JSON.stringify(results)
          EOF
          npx design-lint file.ts --config designlint.config.json --format ./formatter.mjs || true
          cat > designlint.config.js <<'EOF'
          module.exports = {
            tokens: {
              deprecations: { old: { replacement: 'new' } },
              colors: { primary: '#fff' }
            },
            rules: {
              'design-system/deprecation': 'error',
              'design-token/colors': 'warn'
            }
          };
          EOF
          npx design-lint file.ts --config designlint.config.js --format json || true
          rm designlint.config.js
          cat > designlint.config.cjs <<'EOF'
          module.exports = {
            tokens: {
              deprecations: { old: { replacement: 'new' } },
              colors: { primary: '#fff' }
            },
            rules: {
              'design-system/deprecation': 'error',
              'design-token/colors': 'warn'
            }
          };
          EOF
          npx design-lint file.ts --config designlint.config.cjs --format json || true
          rm designlint.config.cjs
          cat > designlint.config.mjs <<'EOF'
          export default {
            tokens: {
              deprecations: { old: { replacement: 'new' } },
              colors: { primary: '#fff' }
            },
            rules: {
              'design-system/deprecation': 'error',
              'design-token/colors': 'warn'
            }
          };
          EOF
          npx design-lint file.ts --config designlint.config.mjs --format json || true
          rm designlint.config.mjs
          cat > designlint.config.mts <<'EOF'
          import type { Config } from '@lapidist/design-lint';

          export default {
            tokens: {
              deprecations: { old: { replacement: 'new' } },
              colors: { primary: '#fff' }
            },
            rules: {
              'design-system/deprecation': 'error',
              'design-token/colors': 'warn'
            }
          } satisfies Config;
          EOF
          npx design-lint file.ts --config designlint.config.mts --format json || true
          rm designlint.config.mts
          cat > designlint.config.ts <<'EOF'
          import type { Config } from '@lapidist/design-lint';

          export default {
            tokens: {
              deprecations: { old: { replacement: 'new' } },
              colors: { primary: '#fff' }
            },
            rules: {
              'design-system/deprecation': 'error',
              'design-token/colors': 'warn'
            }
          } satisfies Config;
          EOF
          npx design-lint file.ts --config designlint.config.ts --format json || true
          rm designlint.config.json
          cat > suggestion.config.json <<'EOF'
          {
            "tokens": {
              "spacing": ["--space-scale-100"]
            },
            "rules": {
              "design-token/spacing": "error"
            }
          }
          EOF
          echo "const s = 'var(--space-scale-10o)';" > suggestion.ts
          npx design-lint suggestion.ts --config suggestion.config.json --format stylish 2>&1 | tee suggestion.txt
          grep -Fq "Did you mean \`--space-scale-100\`?" suggestion.txt
          npx design-lint file.ts --format json || true
